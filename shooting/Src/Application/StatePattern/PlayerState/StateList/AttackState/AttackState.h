#pragma once
#include "../../PlayerState.h"

class AttackState :public PlayerState
{
public:
	void Init(std::string_view _modelName, Math::Vector3 _pos, Math::Vector3 _dir) override;
	void Update(Math::Vector3 _pos = Math::Vector3::Zero, Math::Vector3 _dir = Math::Vector3::Zero) override;
	Math::Vector3 GetPos() const override { return m_pos; };
	Math::Vector3 GetDir() const override { return m_moveDir; };
	std::shared_ptr<KdAnimator> GetAnime() const override { return m_animator; };
	float GetAnimeSpeed() const override { return m_animeSpd; };
	float GetHitDamage() const override;

private:
	enum AttackOrder
	{
		FirstAttack,
		SecondAttack,
		ThirdAttack,
		FourthAttack,
	};

	void Action();

	float m_attackCnt;				// 一定時間経過で攻撃モーションを最初に戻す
	bool m_attackKeyFlg;			// 攻撃用のキーフラグ 
	bool m_attackFlg;				// 今攻撃しようとしているのか観測
	AttackOrder m_attackOrder;		// 何番目の攻撃か判定用
	AttackOrder m_nextAttackOrder;	// 次の攻撃は何か
	bool m_keyFlg;
};